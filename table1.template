#include <cassert>  // Provides assert
#include <cstdlib>  // Provides size_t

namespace main_savitch_12A
{
    
    template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    const std::size_t table<RecordType,  TABLE_SIZE, hashkey> ::CAPACITY; 

    template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    const int table<RecordType, TABLE_SIZE, hashkey> ::NEVER_USED;

    template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    const int table< RecordType, TABLE_SIZE, hashkey> ::PREVIOUSLY_USED;

    template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    table<RecordType,TABLE_SIZE, hashkey> ::table( )
    {
        used = 0;
        for (std::size_t i = 0;i < CAPACITY;i++ )
           data[i].key = NEVER_USED;  
    }

    template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    void table<RecordType, TABLE_SIZE, hashkey> ::insert(const RecordType& entry)
    {
        bool already_present;   
        std::size_t index;        


        // Set index so that data[index] is the spot to place the new entry.
        find_index(entry.key, already_present, index);

        // If the key wasn't already there, then find the location for the new entry.
        if (!already_present)
        {
            index = hash(entry.key);
            while (!is_vacant(index))
                index = next_index(index);
            ++used;
        }

        data[index] = entry;
    }

    template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    void table<RecordType, TABLE_SIZE, hashkey> ::remove(int key)
    {
        bool found;        
        std::size_t index;   

        find_index(key, found, index);
        if (found)
        {   
            data[index].key = PREVIOUSLY_USED;
            --used;
        }
    }

    template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    bool table<RecordType, TABLE_SIZE, hashkey> ::is_present(int key) const
    {
        bool found;
        std::size_t index;
        find_index(key, found, index);
        return found;
    }

    template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    void table<RecordType, TABLE_SIZE, hashkey> ::find(int key, bool& found, RecordType& result) const
    {
        std::size_t index;


        find_index(key, found, index);
        if (found)
            result = data[index];
    }

   template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    inline std::size_t table<RecordType, TABLE_SIZE, hashkey> ::hash(int key) const
    {
        return (key % CAPACITY);
    }

    template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    inline std::size_t table< RecordType, TABLE_SIZE,hashkey> ::next_index(std::size_t index) const
    {
        return ((index+1) % CAPACITY);
    }

    template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    void table< RecordType,  TABLE_SIZE, hashkey> ::find_index(int key, bool& found, std::size_t& i) const
    {
        std::size_t count; 
        count = 0;
        i = hash(key);
        while((count < CAPACITY) && (data[i].key != NEVER_USED) && (data[i].key != key))
        {
            ++count;
            i = next_index(i);
        }
        found = (data[i].key == key);
    }

   template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    inline bool table< RecordType,  TABLE_SIZE, hashkey> ::never_used(std::size_t index) const
    {
        return (data[index].key == NEVER_USED);
    }
        
    template <class RecordType, size_t TABLE_SIZE,int hashkey(const RecordType&)> 
    inline bool table< RecordType,  TABLE_SIZE, hashkey> ::is_vacant(std::size_t index) const
    {
        return (data[index].key == NEVER_USED) || (data[index].key == PREVIOUSLY_USED);
    }
}